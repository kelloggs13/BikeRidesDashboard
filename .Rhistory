)
, nrow = 1
)
p.cal.all <- plot_grid(p.cal.ridedays
, p.cal.distance
, p.cal.watts
, p.cal.cadence
, p.cal.speed
, nrow = 1
)
p.cal.ridedays
p.cal.distance
p.cal.watts
p.cal.cadence <- plot.calendar.hm(df.plot, average_cadence, "Average Cadence", "cont")
p.cal.cadence
p.cal.speed
df.plot
p.cal.speed %>% select(average_cadence)
df.plot %>% select(average_cadence)
df.plot %>% select(_)
df.plot %>% select(average_watts)
df.plot %>% select(average_cadence)
strava.rides <- strava.rides %>%
mutate(Date = lubridate::as_date(start_date_local)
, average_cadence = case_when(average_cadence == "<NA>", NA)
)
strava.rides <- strava.rides %>%
mutate(Date = lubridate::as_date(start_date_local)
, average_cadence = case_when(average_cadence == "<NA>" ~ NA)
)
df.plot %>% select(average_cadence)
strava_rides %>% select(average_cadence)
strava.rides %>% select(average_cadence)
strava.rides <- compile_activities(strava.activities)
strava.rides <- strava.rides %>%
mutate(Date = lubridate::as_date(start_date_local)
, average_cadence = case_when(average_cadence == "<NA>" ~ NA)
)
strava.rides %>% select(average_cadence)
strava.rides <- compile_activities(strava.activities)
strava.rides %>% select(average_cadence, average_cadence_2)
strava.rides <- strava.rides %>%
mutate(Date = lubridate::as_date(start_date_local)
, average_cadence_2 = case_when(average_cadence == "<NA>" ~ NA)
)
strava.rides %>% select(average_cadence, average_cadence_2)
strava.rides <- strava.rides %>%
mutate(Date = lubridate::as_date(start_date_local))
strava.rides <- compile_activities(strava.activities)
strava.rides <- strava.rides %>%
mutate(Date = lubridate::as_date(start_date_local))
df.calendar <- data.frame(Date=seq(as.Date('2023-05-01'), ceiling_date(Sys.Date(), unit = "month")-1, 1)) %>%
mutate( month = month(Date),
year = year(Date),
day = day(Date),
week = week(Date),
dayofweek = wday(Date, week_start = 1, label = TRUE, locale = "en"),
weekofmonth = ceiling((day(Date)-wday(Date)) / 7)
)
df.plot <- left_join(df.calendar, strava.rides, by = "Date")  %>%
mutate(HasRun = ifelse(!is.na(athlete.id), 'Yes', 'No'))
df.plot %>% select(average_cadence)
df.plot <- left_join(df.calendar, strava.rides, by = "Date")
df.plot %>% select(average_cadence)
str(df.plot)
df.calendar <- data.frame(Date=seq(as.Date('2023-05-01'), ceiling_date(Sys.Date(), unit = "month")-1, 1)) %>%
mutate( month = month(Date),
year = year(Date),
day = day(Date),
week = week(Date),
dayofweek = wday(Date, week_start = 1, label = TRUE, locale = "en"),
weekofmonth = ceiling((day(Date)-wday(Date)) / 7)
)
df.plot <- left_join(df.calendar, strava.rides, by = "Date")  %>%
mutate(HasRun = ifelse(!is.na(athlete.id), 'Yes', 'No'))
plot.calendar.hm <- function(df, var, title, coltype){
df %>%
ggplot(aes(dayofweek,  reorder(weekofmonth, desc(weekofmonth)), fill = {{var}})) +
geom_tile(color ="grey") +
facet_wrap(~year+month, scales = "free", nrow = 2) +
{ if(coltype == "disc") scale_fill_manual(values = c("darkgreen", "white")) } +
{ if(coltype == "cont") scale_fill_gradient(low = "lightblue", high = "darkblue", na.value = NA) } +
scale_x_discrete("\nDay of Week") +
scale_y_discrete("Week\n", breaks=1:4) +
theme_bw() +
theme(legend.position = "none", panel.grid = element_blank()) +
ggtitle(title) +
theme_tufte() +
theme(strip.text = element_text(), axis.ticks = element_blank(), legend.position = "bottom")
}
p.cal.ridedays <- plot.calendar.hm(df.plot, HasRun, "Days with Ride", "disc")
p.cal.distance <- plot.calendar.hm(df.plot, distance, "Kilometers", "cont")
p.cal.watts <- plot.calendar.hm(df.plot, average_watts, "Average Watt", "cont")
p.cal.speed <- plot.calendar.hm(df.plot, average_speed, "Average Cadence", "cont")
p.cal.all <- plot_grid(p.cal.ridedays
, p.cal.distance
, p.cal.watts
, p.cal.speed
, nrow = 1
)
p.cal.all
shiny::runApp()
df.plot
runApp()
shiny::runApp()
rm(list=ls())
here::i_am("global.r")
require(shiny)
require(shinydashboard)
require(tidyverse)
require(ggplot2)
require(lubridate)
require(patchwork)
require(trackeR) # https://cran.r-project.org/web/packages/trackeR/vignettes/TourDetrackeR.html
require(reshape2)
require(RColorBrewer)
require(cowplot)
require(FITfileR)
require(ggthemes)
require(rStrava)
require(httr)
# https://msmith.de/FITfileR/articles/FITfileR.html
# https://medium.com/@adrian.joseph/read-fit-files-in-r-a-story-on-why-you-should-not-reinvent-the-wheel-133394e6bb3
js <- "
Shiny.addCustomMessageHandler('anim',
function(x){
var $s = $('div.small-box div.inner h3');
var o = {value: 0};
$.Animation( o, {
value: x
}, {
duration: 2000
//easing: 'easeOutCubic'
}).progress(function(e) {
$s.text((e.tweens[0].now).toFixed(1) + ' Km');
});
}
);"
source("./import_bike_files.r")
str(df.plot)
df.calendar <- data.frame(Date=seq(as.Date('2023-05-01'), ceiling_date(Sys.Date(), unit = "year")-1, 1)) %>%
mutate( month = month(Date),
year = year(Date),
day = day(Date),
week = week(Date),
dayofweek = wday(Date, week_start = 1, label = TRUE, locale = "en"),
weekofmonth = ceiling((day(Date)-wday(Date)) / 7)
)
df.plot <- left_join(df.calendar, strava.rides, by = "Date")  %>%
mutate(HasRun = ifelse(!is.na(athlete.id), 'Yes', 'No'))
str(df.plot)
View(df.plot)
df.plot %>% group_by(name) %>%
summarise(NbrRides = n())
df.plot %>% group_by(name) %>%
summarise(NbrRides = n()) %>%
arrange(-NbrRides)
df.plot %>% group_by(name) %>%
summarise(NbrRides = n()) %>%
arrange(NbrRides)
df.plot %>% group_by(name) %>%
summarise(NbrRides = n()) %>%
arrange(-NbrRides) %>%
head(3)
df.plot %>% group_by(name) %>%
filter(!is.na(name)) %>%
summarise(NbrRides = n()) %>%
arrange(-NbrRides) %>%
head(3)
View(df.plot)
View(df.plot)
strava.rides.day <- strava.rides %>%
group_by(Date) %>%
summarise(HasRun = max(HasRun)
, distance = sum(distance)
, average_watts = median(average_watts)
, kilocal = sum(kilojoules)
)
strava.rides <- compile_activities(strava.activities)
strava.rides <- strava.rides %>%
mutate(Date = lubridate::as_date(start_date_local)
, HasRun = ifelse(!is.na(athlete.id), 'Yes', 'No')
)
strava.rides.day <- strava.rides %>%
group_by(Date) %>%
summarise(HasRun = max(HasRun)
, distance = sum(distance)
, average_watts = median(average_watts)
, kilocal = sum(kilojoules)
)
strava.rides.day
df.calendar <- data.frame(Date=seq(as.Date('2023-05-01'), ceiling_date(Sys.Date(), unit = "year")-1, 1)) %>%
mutate( month = month(Date),
year = year(Date),
day = day(Date),
week = week(Date),
dayofweek = wday(Date, week_start = 1, label = TRUE, locale = "en"),
weekofmonth = ceiling((day(Date)-wday(Date)) / 7)
)
df.plot.day <- left_join(df.calendar, strava.rides, by = "Date")
plot.calendar.hm <- function(df, var, title, coltype){
df %>%
ggplot(aes(week, reorder(dayofweek, desc(dayofweek)), fill = {{var}})) +
geom_tile(color ="grey") +
facet_wrap(~year, scales = "free", nrow = 2) +
{ if(coltype == "disc") scale_fill_manual(values = c("white", "darkgreen")) } +
{ if(coltype == "cont") scale_fill_gradient(low = "lightblue", high = "darkblue", na.value = NA) } +
scale_x_continuous("\nWeek", breaks = seq(0, 52, 4)) +
scale_y_discrete("Day of Week\n") +
theme_bw() +
theme(legend.position = "none", panel.grid = element_blank()) +
ggtitle(title)
}
p.cal.ridedays <- plot.calendar.hm(df.plot.day, HasRun, "Days with Ride", "disc")
p.cal.distance <- plot.calendar.hm(df.plot.day, distance, "Kilometers", "cont")
p.cal.watts <- plot.calendar.hm(df.plot.day, average_watts, "Average Watt", "cont")
p.cal.speed <- plot.calendar.hm(df.plot.day, average_speed, "Average Speed", "cont")
p.cal.all <- plot_grid(p.cal.ridedays
, p.cal.distance
, p.cal.watts
, p.cal.speed
, nrow = 2
)
df.plot %>% group_by(name) %>%
filter(!is.na(name)) %>%
summarise(NbrRides = n()) %>%
arrange(-NbrRides) %>%
head(3)
runApp()
df.plot.day <- left_join(df.calendar, strava.rides.day, by = "Date")
plot.calendar.hm <- function(df, var, title, coltype){
df %>%
ggplot(aes(week, reorder(dayofweek, desc(dayofweek)), fill = {{var}})) +
geom_tile(color ="grey") +
facet_wrap(~year, scales = "free", nrow = 2) +
{ if(coltype == "disc") scale_fill_manual(values = c("white", "darkgreen")) } +
{ if(coltype == "cont") scale_fill_gradient(low = "lightblue", high = "darkblue", na.value = NA) } +
scale_x_continuous("\nWeek", breaks = seq(0, 52, 4)) +
scale_y_discrete("Day of Week\n") +
theme_bw() +
theme(legend.position = "none", panel.grid = element_blank()) +
ggtitle(title)
}
runApp()
df.plot.day
p.cal.kilocal <- plot.calendar.hm(df.plot.day, kilocal, "Kilocalories", "cont")
runApp()
runApp()
runApp()
runApp()
strava.rides.day
strava.rides.day <- strava.rides %>%
group_by(Date) %>%
summarise(HasRun = factor(max(HasRun))
, distance = sum(distance)
, average_watts = median(average_watts)
, kilocal = sum(kilojoules)
)
strava.rides.day
runApp()
df.plot.day
strava.rides <- strava.rides %>%
mutate(Date = lubridate::as_date(start_date_local)
, HasRun = ifelse(!is.na(athlete.id), 1, 0)
)
strava.rides.day <- strava.rides %>%
group_by(Date) %>%
summarise(HasRun = factor(max(HasRun))
, distance = sum(distance)
, average_watts = median(average_watts)
, kilocal = sum(kilojoules)
)
strava.rides.day
runApp()
runApp()
require(fresh)
mytheme <- create_theme(
adminlte_color(
light_blue = "#434C5E"
),
adminlte_sidebar(
width = "400px",
dark_bg = "#D8DEE9",
dark_hover_bg = "#81A1C1",
dark_color = "#2E3440"
),
adminlte_global(
content_bg = "#FFF",
box_bg = "#D8DEE9",
info_box_bg = "#D8DEE9"
)
)
runApp()
js <- "
Shiny.addCustomMessageHandler('anim',
function(x){
var $s = $('div.small-box div.inner h3');
var o = {value: 0};
$.Animation( o, {
value: x
}, {
duration: 2000
//easing: 'easeOutCubic'
}).progress(function(e) {
$s.text((e.tweens[0].now).toFixed(1) + ' Km');
});
}
);"
require(plotly)
runApp()
runApp()
runApp()
p.cal.all
str(p.cal.all)
runApp()
p.cal.ridedays
p.cal.distance
p.cal.watts
p.cal.kilocal
runApp()
runApp()
require(patchwork)
p.call.all <- p.cal.ridedays + p.cal.distance + p.cal.watts + p.cal.kilocal
p.call.all
p.call.all <- p.cal.ridedays + p.cal.distance / p.cal.watts + p.cal.kilocal
p.call.all
p.call.all <- ( p.cal.ridedays + p.cal.distance ) / ( p.cal.watts + p.cal.kilocal )
p.call.all
runApp()
runApp()
strava.rides.day <- strava.rides %>%
group_by(Date) %>%
summarise(HasRun = factor(max(HasRun))
, distance = sum(distance)
, average_watts = median(average_watts)
, kilocal = sum(kilojoules)
) %>%
mutate(bigmacs = kilocal / 590)
strava.rides.day
strava.rides.day <- strava.rides %>%
group_by(Date) %>%
summarise(HasRun = factor(max(HasRun))
, distance = sum(distance)
, average_watts = median(average_watts)
, kilocal = sum(kilojoules)
) %>%
mutate(bigmacs = round(kilocal / 590, 1))
strava.rides.day
plot.calendar.hm(df.plot.day, bigmacs, "Number of Big Macs", "cont")
httr::config(token = strava_oauth("BikeRideDashboard",
"108841",
"dd5edb16a11718bf5086264c2eac255e969059a8",
app_scope = "activity:read_all",
cache = TRUE
)
)
strava.activities <- get_activity_list(strava_oauth("BikeRideDashboard",
"108841",
"dd5edb16a11718bf5086264c2eac255e969059a8",
app_scope = "activity:read_all",
cache = TRUE
)
)
strava.rides <- compile_activities(strava.activities)
strava.rides <- strava.rides %>%
mutate(Date = lubridate::as_date(start_date_local)
, HasRun = ifelse(!is.na(athlete.id), 1, 0)
)
strava.rides.day <- strava.rides %>%
group_by(Date) %>%
summarise(HasRun = factor(max(HasRun))
, distance = sum(distance)
, average_watts = median(average_watts)
, kilocal = sum(kilojoules)
) %>%
mutate(bigmacs = round(kilocal / 590, 1))
df.calendar <- data.frame(Date=seq(as.Date('2023-05-01'), ceiling_date(Sys.Date(), unit = "year")-1, 1)) %>%
mutate( month = month(Date),
year = year(Date),
day = day(Date),
week = week(Date),
dayofweek = wday(Date, week_start = 1, label = TRUE, locale = "en"),
weekofmonth = ceiling((day(Date)-wday(Date)) / 7)
)
df.plot.day <- left_join(df.calendar, strava.rides.day, by = "Date")
plot.calendar.hm <- function(df, var, title, coltype){
df %>%
ggplot(aes(week, reorder(dayofweek, desc(dayofweek)), fill = {{var}})) +
geom_tile(color ="grey") +
facet_wrap(~year, scales = "free", nrow = 2) +
{ if(coltype == "disc") scale_fill_manual(values = c("darkgreen", "white"), na.value = NA) } +
{ if(coltype == "cont") scale_fill_gradient(low = "lightblue", high = "darkblue", na.value = NA) } +
scale_x_continuous("\nWeek", breaks = seq(0, 52, 4)) +
scale_y_discrete("Day of Week\n") +
theme_bw() +
theme(legend.position = "none", panel.grid = element_blank()) +
ggtitle(title)
}
plot.calendar.hm(df.plot.day, bigmacs, "Number of Big Macs", "cont")
df %>%
ggplot(aes(week, reorder(dayofweek, desc(dayofweek)), fill = {{var}})) +
geom_tile(color ="grey") +
facet_wrap(~year, scales = "free", nrow = 2) +
{ if(coltype == "disc") scale_fill_manual(values = c("darkgreen", "white"), na.value = NA) } +
{ if(coltype == "cont") scale_fill_gradient(low = "lightblue", high = "darkblue", na.value = NA) } +
scale_x_continuous("\nWeek", breaks = seq(0, 52, 4)) +
scale_y_discrete("Day of Week\n") +
theme_bw() +
theme(legend.position = "bottom", panel.grid = element_blank()) +
ggtitle(title)
plot.calendar.hm <- function(df, var, title, coltype){
df %>%
ggplot(aes(week, reorder(dayofweek, desc(dayofweek)), fill = {{var}})) +
geom_tile(color ="grey") +
facet_wrap(~year, scales = "free", nrow = 2) +
{ if(coltype == "disc") scale_fill_manual(values = c("darkgreen", "white"), na.value = NA) } +
{ if(coltype == "cont") scale_fill_gradient(low = "lightblue", high = "darkblue", na.value = NA) } +
scale_x_continuous("\nWeek", breaks = seq(0, 52, 4)) +
scale_y_discrete("Day of Week\n") +
theme_bw() +
theme(legend.position = "bottom", panel.grid = element_blank()) +
ggtitle(title)
}
plot.calendar.hm(df.plot.day, bigmacs, "Number of Big Macs", "cont")
runApp()
p.cal.ridedays + p.cal.distance +  p.cal.bigmacs
runApp()
runApp()
vb_total_distance <- strava.rides.day %>%
summarise(vb_total_distance = sum(distance, na.rm = TRUE)) %>%
pull(vb_total_distance)
vb_total_distance <- strava.rides.day %>%
summarise(vb_total_distance = sum(distance, na.rm = TRUE)) %>%
pull(vb_total_distance)
vb_total_distance
strava.rides.day %>%
summarise(vb_total_distance = sum(distance, na.rm = TRUE)) %>%
pull(vb_total_distance) %>%
round(0)
strava.rides.day %>%
summarise(vb_total_distance = sum(distance, na.rm = TRUE)) %>%
pull(vb_total_distance) %>%
round(0) %>%
paste0(., ' KM')
strava.rides.day %>%
summarise(vb_total_distance = sum(distance, na.rm = TRUE)) %>%
pull(vb_total_distance) %>%
round(0) %>%
paste0(., ' Km')
strava.rides.day %>%
summarise(vb_total_distance = sum(distance, na.rm = TRUE)) %>%
pull(vb_total_distance) %>%
round(0) %>%
paste0(., 'Km')
runApp()
vb_total_rides <- strava.rides.day %>%
filter(Ride)
strava.rides.day
strava.rides.day %>%
filter(HasRun == 1) %>%
count() %>%
pull(n)
strava.rides
strava.rides %>%
summarise(bigmacs = sum(kilojoules) / kcal_per_bigmac)
kcal_per_bigmac <- 590
kcal_per_bigmac <- 590
strava.rides %>%
summarise(bigmacs = sum(kilojoules) / kcal_per_bigmac)
strava.rides %>%
summarise(bigmacs = sum(kilojoules) / kcal_per_bigmac) %>%
round(0)
strava.rides %>%
summarise(bigmacs = sum(kilojoules) / kcal_per_bigmac) %>%
floor()
bv_total_bigmacs <- strava.rides %>%
summarise(bigmacs = sum(kilojoules) / kcal_per_bigmac) %>%
floor() %>%
pull(bigmacs)
bv_total_bigmacs
vb_total_bigmacs <- strava.rides %>%
summarise(bigmacs = sum(kilojoules) / kcal_per_bigmac) %>%
floor() %>%
pull(bigmacs)
vb_total_bigmacs
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
strava.rides
View(strava.rides)
